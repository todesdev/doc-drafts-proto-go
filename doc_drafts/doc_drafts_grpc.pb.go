// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: doc_drafts.proto

package doc_drafts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SharedDraftsServiceClient is the client API for SharedDraftsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharedDraftsServiceClient interface {
	GetAllByType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (SharedDraftsService_GetAllByTypeClient, error)
	GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SharedDraft, error)
	Create(ctx context.Context, in *SharedDraftRequest, opts ...grpc.CallOption) (*SharedDraft, error)
	Update(ctx context.Context, in *UpdateSharedDraftRequest, opts ...grpc.CallOption) (*SharedDraft, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sharedDraftsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSharedDraftsServiceClient(cc grpc.ClientConnInterface) SharedDraftsServiceClient {
	return &sharedDraftsServiceClient{cc}
}

func (c *sharedDraftsServiceClient) GetAllByType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (SharedDraftsService_GetAllByTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SharedDraftsService_ServiceDesc.Streams[0], "/doc_drafts.SharedDraftsService/GetAllByType", opts...)
	if err != nil {
		return nil, err
	}
	x := &sharedDraftsServiceGetAllByTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SharedDraftsService_GetAllByTypeClient interface {
	Recv() (*SharedDraft, error)
	grpc.ClientStream
}

type sharedDraftsServiceGetAllByTypeClient struct {
	grpc.ClientStream
}

func (x *sharedDraftsServiceGetAllByTypeClient) Recv() (*SharedDraft, error) {
	m := new(SharedDraft)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sharedDraftsServiceClient) GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*SharedDraft, error) {
	out := new(SharedDraft)
	err := c.cc.Invoke(ctx, "/doc_drafts.SharedDraftsService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharedDraftsServiceClient) Create(ctx context.Context, in *SharedDraftRequest, opts ...grpc.CallOption) (*SharedDraft, error) {
	out := new(SharedDraft)
	err := c.cc.Invoke(ctx, "/doc_drafts.SharedDraftsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharedDraftsServiceClient) Update(ctx context.Context, in *UpdateSharedDraftRequest, opts ...grpc.CallOption) (*SharedDraft, error) {
	out := new(SharedDraft)
	err := c.cc.Invoke(ctx, "/doc_drafts.SharedDraftsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharedDraftsServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/doc_drafts.SharedDraftsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharedDraftsServiceServer is the server API for SharedDraftsService service.
// All implementations must embed UnimplementedSharedDraftsServiceServer
// for forward compatibility
type SharedDraftsServiceServer interface {
	GetAllByType(*TypeRequest, SharedDraftsService_GetAllByTypeServer) error
	GetById(context.Context, *IdRequest) (*SharedDraft, error)
	Create(context.Context, *SharedDraftRequest) (*SharedDraft, error)
	Update(context.Context, *UpdateSharedDraftRequest) (*SharedDraft, error)
	Delete(context.Context, *IdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSharedDraftsServiceServer()
}

// UnimplementedSharedDraftsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSharedDraftsServiceServer struct {
}

func (UnimplementedSharedDraftsServiceServer) GetAllByType(*TypeRequest, SharedDraftsService_GetAllByTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllByType not implemented")
}
func (UnimplementedSharedDraftsServiceServer) GetById(context.Context, *IdRequest) (*SharedDraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSharedDraftsServiceServer) Create(context.Context, *SharedDraftRequest) (*SharedDraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSharedDraftsServiceServer) Update(context.Context, *UpdateSharedDraftRequest) (*SharedDraft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSharedDraftsServiceServer) Delete(context.Context, *IdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSharedDraftsServiceServer) mustEmbedUnimplementedSharedDraftsServiceServer() {}

// UnsafeSharedDraftsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharedDraftsServiceServer will
// result in compilation errors.
type UnsafeSharedDraftsServiceServer interface {
	mustEmbedUnimplementedSharedDraftsServiceServer()
}

func RegisterSharedDraftsServiceServer(s grpc.ServiceRegistrar, srv SharedDraftsServiceServer) {
	s.RegisterService(&SharedDraftsService_ServiceDesc, srv)
}

func _SharedDraftsService_GetAllByType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SharedDraftsServiceServer).GetAllByType(m, &sharedDraftsServiceGetAllByTypeServer{stream})
}

type SharedDraftsService_GetAllByTypeServer interface {
	Send(*SharedDraft) error
	grpc.ServerStream
}

type sharedDraftsServiceGetAllByTypeServer struct {
	grpc.ServerStream
}

func (x *sharedDraftsServiceGetAllByTypeServer) Send(m *SharedDraft) error {
	return x.ServerStream.SendMsg(m)
}

func _SharedDraftsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedDraftsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.SharedDraftsService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedDraftsServiceServer).GetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharedDraftsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedDraftsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.SharedDraftsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedDraftsServiceServer).Create(ctx, req.(*SharedDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharedDraftsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharedDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedDraftsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.SharedDraftsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedDraftsServiceServer).Update(ctx, req.(*UpdateSharedDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharedDraftsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedDraftsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.SharedDraftsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedDraftsServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SharedDraftsService_ServiceDesc is the grpc.ServiceDesc for SharedDraftsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SharedDraftsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doc_drafts.SharedDraftsService",
	HandlerType: (*SharedDraftsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _SharedDraftsService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SharedDraftsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SharedDraftsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SharedDraftsService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllByType",
			Handler:       _SharedDraftsService_GetAllByType_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "doc_drafts.proto",
}
