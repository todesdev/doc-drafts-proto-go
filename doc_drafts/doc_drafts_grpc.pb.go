// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: doc_drafts.proto

package doc_drafts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocDraftsServiceClient is the client API for DocDraftsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocDraftsServiceClient interface {
	GetAllByUserIdAndType(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (DocDraftsService_GetAllByUserIdAndTypeClient, error)
	GetByUserIdAndDocId(ctx context.Context, in *DocIdUserIdRequest, opts ...grpc.CallOption) (*DocDraftResponse, error)
	CreateDocDraft(ctx context.Context, in *DocDraftRequest, opts ...grpc.CallOption) (*DocDraftResponse, error)
	UpdateDocDraft(ctx context.Context, in *DocDraftRequest, opts ...grpc.CallOption) (*DocDraftResponse, error)
	DeleteDocDraft(ctx context.Context, in *DocIdUserIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type docDraftsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocDraftsServiceClient(cc grpc.ClientConnInterface) DocDraftsServiceClient {
	return &docDraftsServiceClient{cc}
}

func (c *docDraftsServiceClient) GetAllByUserIdAndType(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (DocDraftsService_GetAllByUserIdAndTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocDraftsService_ServiceDesc.Streams[0], "/doc_drafts.DocDraftsService/GetAllByUserIdAndType", opts...)
	if err != nil {
		return nil, err
	}
	x := &docDraftsServiceGetAllByUserIdAndTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocDraftsService_GetAllByUserIdAndTypeClient interface {
	Recv() (*DocDraftResponse, error)
	grpc.ClientStream
}

type docDraftsServiceGetAllByUserIdAndTypeClient struct {
	grpc.ClientStream
}

func (x *docDraftsServiceGetAllByUserIdAndTypeClient) Recv() (*DocDraftResponse, error) {
	m := new(DocDraftResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *docDraftsServiceClient) GetByUserIdAndDocId(ctx context.Context, in *DocIdUserIdRequest, opts ...grpc.CallOption) (*DocDraftResponse, error) {
	out := new(DocDraftResponse)
	err := c.cc.Invoke(ctx, "/doc_drafts.DocDraftsService/GetByUserIdAndDocId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docDraftsServiceClient) CreateDocDraft(ctx context.Context, in *DocDraftRequest, opts ...grpc.CallOption) (*DocDraftResponse, error) {
	out := new(DocDraftResponse)
	err := c.cc.Invoke(ctx, "/doc_drafts.DocDraftsService/CreateDocDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docDraftsServiceClient) UpdateDocDraft(ctx context.Context, in *DocDraftRequest, opts ...grpc.CallOption) (*DocDraftResponse, error) {
	out := new(DocDraftResponse)
	err := c.cc.Invoke(ctx, "/doc_drafts.DocDraftsService/UpdateDocDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docDraftsServiceClient) DeleteDocDraft(ctx context.Context, in *DocIdUserIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/doc_drafts.DocDraftsService/DeleteDocDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocDraftsServiceServer is the server API for DocDraftsService service.
// All implementations must embed UnimplementedDocDraftsServiceServer
// for forward compatibility
type DocDraftsServiceServer interface {
	GetAllByUserIdAndType(*GetAllRequest, DocDraftsService_GetAllByUserIdAndTypeServer) error
	GetByUserIdAndDocId(context.Context, *DocIdUserIdRequest) (*DocDraftResponse, error)
	CreateDocDraft(context.Context, *DocDraftRequest) (*DocDraftResponse, error)
	UpdateDocDraft(context.Context, *DocDraftRequest) (*DocDraftResponse, error)
	DeleteDocDraft(context.Context, *DocIdUserIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDocDraftsServiceServer()
}

// UnimplementedDocDraftsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocDraftsServiceServer struct {
}

func (UnimplementedDocDraftsServiceServer) GetAllByUserIdAndType(*GetAllRequest, DocDraftsService_GetAllByUserIdAndTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllByUserIdAndType not implemented")
}
func (UnimplementedDocDraftsServiceServer) GetByUserIdAndDocId(context.Context, *DocIdUserIdRequest) (*DocDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserIdAndDocId not implemented")
}
func (UnimplementedDocDraftsServiceServer) CreateDocDraft(context.Context, *DocDraftRequest) (*DocDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocDraft not implemented")
}
func (UnimplementedDocDraftsServiceServer) UpdateDocDraft(context.Context, *DocDraftRequest) (*DocDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocDraft not implemented")
}
func (UnimplementedDocDraftsServiceServer) DeleteDocDraft(context.Context, *DocIdUserIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocDraft not implemented")
}
func (UnimplementedDocDraftsServiceServer) mustEmbedUnimplementedDocDraftsServiceServer() {}

// UnsafeDocDraftsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocDraftsServiceServer will
// result in compilation errors.
type UnsafeDocDraftsServiceServer interface {
	mustEmbedUnimplementedDocDraftsServiceServer()
}

func RegisterDocDraftsServiceServer(s grpc.ServiceRegistrar, srv DocDraftsServiceServer) {
	s.RegisterService(&DocDraftsService_ServiceDesc, srv)
}

func _DocDraftsService_GetAllByUserIdAndType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocDraftsServiceServer).GetAllByUserIdAndType(m, &docDraftsServiceGetAllByUserIdAndTypeServer{stream})
}

type DocDraftsService_GetAllByUserIdAndTypeServer interface {
	Send(*DocDraftResponse) error
	grpc.ServerStream
}

type docDraftsServiceGetAllByUserIdAndTypeServer struct {
	grpc.ServerStream
}

func (x *docDraftsServiceGetAllByUserIdAndTypeServer) Send(m *DocDraftResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DocDraftsService_GetByUserIdAndDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocIdUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocDraftsServiceServer).GetByUserIdAndDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.DocDraftsService/GetByUserIdAndDocId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocDraftsServiceServer).GetByUserIdAndDocId(ctx, req.(*DocIdUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocDraftsService_CreateDocDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocDraftsServiceServer).CreateDocDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.DocDraftsService/CreateDocDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocDraftsServiceServer).CreateDocDraft(ctx, req.(*DocDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocDraftsService_UpdateDocDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocDraftsServiceServer).UpdateDocDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.DocDraftsService/UpdateDocDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocDraftsServiceServer).UpdateDocDraft(ctx, req.(*DocDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocDraftsService_DeleteDocDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocIdUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocDraftsServiceServer).DeleteDocDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doc_drafts.DocDraftsService/DeleteDocDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocDraftsServiceServer).DeleteDocDraft(ctx, req.(*DocIdUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocDraftsService_ServiceDesc is the grpc.ServiceDesc for DocDraftsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocDraftsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doc_drafts.DocDraftsService",
	HandlerType: (*DocDraftsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByUserIdAndDocId",
			Handler:    _DocDraftsService_GetByUserIdAndDocId_Handler,
		},
		{
			MethodName: "CreateDocDraft",
			Handler:    _DocDraftsService_CreateDocDraft_Handler,
		},
		{
			MethodName: "UpdateDocDraft",
			Handler:    _DocDraftsService_UpdateDocDraft_Handler,
		},
		{
			MethodName: "DeleteDocDraft",
			Handler:    _DocDraftsService_DeleteDocDraft_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllByUserIdAndType",
			Handler:       _DocDraftsService_GetAllByUserIdAndType_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "doc_drafts.proto",
}
